1- all(iterable)
iterable: anything you can loop over using foor loop: list, string, tuple, dictionary, ..
###############################################################################################
2- any(iterable)

###############################################################################################

run pytest file
>> pytest tips_tricks/tests/test_all_any_1.py

RUN specific fuction in the test file
>> pytest tips_tricks/tests/test_all_any_1.py::test_not_contains_punctuation
collected 1 item [because you are using just on functino to test]
###############################################################################################
3- enumerate
# [ (id, (country, capital)) ]
# every tuple contains 2 items (id, (country, capital)) so, you must add () to be like _id, (country, capital) to match
# the values to unpack
for _id, (country, capital) in enumerate(capitals.items(), start=1):
    capitals_.add_row([_id, country, capital])

print(capitals_)


###############################################################################################
4- zip
zip : to loop over multiple iterable like (loop over 3 lists)
zip stops when reach to the end of reachest iterable
so you  need something work with missing values, you need ==>  from itertools import zip_longest(check example)

###############################################################################################
5- reverse()  vs reversed()

countries.reverse()  # reverse in place and reverse the original one so that string and tuple don't contain reverse()
# because reverse update the original obj and string, tuple are immutables

names = ["John", "James", "Leon", "Smith", "Mickael"]
rev_names = reversed(names)  # type == > list_reverseiterator  : make a copy not reverse the original one

###############################################################################################